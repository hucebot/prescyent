import unittest
import torch

from prescyent.dataset import Trajectory
from prescyent.utils.interpolate import (
    interpolate_iterable_with_ratio,
    interpolate_trajectory_tensor_with_ratio,
)


class TestInterpolation(unittest.TestCase):
    def test_interpolate(self):
        in_list = [2.0, 3.0, 4.0, 5.0]
        out = interpolate_iterable_with_ratio(in_list, 1)
        self.assertEqual(in_list, out)
        out_truth = [2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0]
        out = interpolate_iterable_with_ratio(in_list, 2)
        self.assertEqual(out_truth, out)
        out_truth = [
            2.0,
            2.2,
            2.4,
            2.6,
            2.8,
            3.0,
            3.2,
            3.4,
            3.6,
            3.8,
            4.0,
            4.2,
            4.4,
            4.6,
            4.8,
            5.0,
        ]
        out = interpolate_iterable_with_ratio(in_list, 5)
        self.assertEqual(out_truth, out)
        in_list = list(reversed(in_list))
        out_truth = list(reversed(out_truth))
        out = interpolate_iterable_with_ratio(in_list, 5)
        self.assertEqual(out_truth, out)

    def test_interpolate_tensor(self):
        in_tensor = torch.FloatTensor(
            [
                [[1, 2, 3], [5, 4, 3]],
                [[2, 3, 4], [4, 3, 2]],
                [[3, 4, 5], [3, 2, 1]],
                [[4, 5, 6], [2, 1, 0]],
                [[5, 6, 7], [1, 0, -1]],
            ]
        )
        out_truth = torch.FloatTensor(
            [
                [[1.0000, 2.0000, 3.0000], [5.0000, 4.0000, 3.0000]],
                [[1.2000, 2.2000, 3.2000], [4.8000, 3.8000, 2.8000]],
                [[1.4000, 2.4000, 3.4000], [4.6000, 3.6000, 2.6000]],
                [[1.6000, 2.6000, 3.6000], [4.4000, 3.4000, 2.4000]],
                [[1.8000, 2.8000, 3.8000], [4.2000, 3.2000, 2.2000]],
                [[2.0000, 3.0000, 4.0000], [4.0000, 3.0000, 2.0000]],
                [[2.2000, 3.2000, 4.2000], [3.8000, 2.8000, 1.8000]],
                [[2.4000, 3.4000, 4.4000], [3.6000, 2.6000, 1.6000]],
                [[2.6000, 3.6000, 4.6000], [3.4000, 2.4000, 1.4000]],
                [[2.8000, 3.8000, 4.8000], [3.2000, 2.2000, 1.2000]],
                [[3.0000, 4.0000, 5.0000], [3.0000, 2.0000, 1.0000]],
                [[3.2000, 4.2000, 5.2000], [2.8000, 1.8000, 0.8000]],
                [[3.4000, 4.4000, 5.4000], [2.6000, 1.6000, 0.6000]],
                [[3.6000, 4.6000, 5.6000], [2.4000, 1.4000, 0.4000]],
                [[3.8000, 4.8000, 5.8000], [2.2000, 1.2000, 0.2000]],
                [[4.0000, 5.0000, 6.0000], [2.0000, 1.0000, 0.0000]],
                [[4.2000, 5.2000, 6.2000], [1.8000, 0.8000, -0.2000]],
                [[4.4000, 5.4000, 6.4000], [1.6000, 0.6000, -0.4000]],
                [[4.6000, 5.6000, 6.6000], [1.4000, 0.4000, -0.6000]],
                [[4.8000, 5.8000, 6.8000], [1.2000, 0.2000, -0.8000]],
                [[5.0000, 6.0000, 7.0000], [1.0000, 0.0000, -1.0000]],
            ]
        )
        out_pred = interpolate_trajectory_tensor_with_ratio(in_tensor, 5)
        self.assertTrue(torch.equal(out_truth, out_pred))

    def test_interpolate_trajectory(self):
        in_tensor = torch.FloatTensor(
            [
                [[1, 2, 3], [5, 4, 3]],
                [[2, 3, 4], [4, 3, 2]],
                [[3, 4, 5], [3, 2, 1]],
                [[4, 5, 6], [2, 1, 0]],
                [[5, 6, 7], [1, 0, -1]],
            ]
        )
        traj = Trajectory(in_tensor, frequency=5)
        traj.update_frequency(5)
        self.assertTrue(torch.equal(in_tensor, traj.tensor))
        traj.update_frequency(25)
        out_truth = torch.FloatTensor(
            [
                [[1.0000, 2.0000, 3.0000], [5.0000, 4.0000, 3.0000]],
                [[1.1667, 2.1667, 3.1667], [4.8333, 3.8333, 2.8333]],
                [[1.3333, 2.3333, 3.3333], [4.6667, 3.6667, 2.6667]],
                [[1.5000, 2.5000, 3.5000], [4.5000, 3.5000, 2.5000]],
                [[1.6667, 2.6667, 3.6667], [4.3333, 3.3333, 2.3333]],
                [[1.8333, 2.8333, 3.8333], [4.1667, 3.1667, 2.1667]],
                [[2.0000, 3.0000, 4.0000], [4.0000, 3.0000, 2.0000]],
                [[2.1667, 3.1667, 4.1667], [3.8333, 2.8333, 1.8333]],
                [[2.3333, 3.3333, 4.3333], [3.6667, 2.6667, 1.6667]],
                [[2.5000, 3.5000, 4.5000], [3.5000, 2.5000, 1.5000]],
                [[2.6667, 3.6667, 4.6667], [3.3333, 2.3333, 1.3333]],
                [[2.8333, 3.8333, 4.8333], [3.1667, 2.1667, 1.1667]],
                [[3.0000, 4.0000, 5.0000], [3.0000, 2.0000, 1.0000]],
                [[3.1667, 4.1667, 5.1667], [2.8333, 1.8333, 0.8333]],
                [[3.3333, 4.3333, 5.3333], [2.6667, 1.6667, 0.6667]],
                [[3.5000, 4.5000, 5.5000], [2.5000, 1.5000, 0.5000]],
                [[3.6667, 4.6667, 5.6667], [2.3333, 1.3333, 0.3333]],
                [[3.8333, 4.8333, 5.8333], [2.1667, 1.1667, 0.1667]],
                [[4.0000, 5.0000, 6.0000], [2.0000, 1.0000, 0.0000]],
                [[4.1667, 5.1667, 6.1667], [1.8333, 0.8333, -0.1667]],
                [[4.3333, 5.3333, 6.3333], [1.6667, 0.6667, -0.3333]],
                [[4.5000, 5.5000, 6.5000], [1.5000, 0.5000, -0.5000]],
                [[4.6667, 5.6667, 6.6667], [1.3333, 0.3333, -0.6667]],
                [[4.8333, 5.8333, 6.8333], [1.1667, 0.1667, -0.8333]],
                [[5.0000, 6.0000, 7.0000], [1.0000, 0.0000, -1.0000]],
            ]
        )
        self.assertEqual(traj.frequency, 25)
        self.assertTrue(torch.allclose(out_truth, traj.tensor, atol=0.0001))
